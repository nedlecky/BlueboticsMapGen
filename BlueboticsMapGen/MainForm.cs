// Test code to experiment with automated synthesis of maps for Bluebotics nav system
// Currently hardcodes parameters for test DC
// Test 12/15/2020

using System;
using System.Collections.Generic;
using System.Windows.Forms;

namespace BlueboticsMapGen
{
    public class Point
    {
        public double X;
        public double Y;

        public Point()
        {
            X = 0;
            Y = 0;
        }
        public Point(double x, double y)
        {
            X = x;
            Y = y;
        }
        public Point(Point p)
        {
            X = p.X;
            Y = p.Y;
        }
        public void Set(double x, double y)
        {
            X = x;
            Y = y;
        }
    }

    public partial class MainForm : Form
    {
        public MainForm()
        {
            InitializeComponent();
        }

        System.IO.StreamWriter file;
        int segmentId = 1;
        int nodeId = 1001;

        Point pDest = new Point();
        private int Wall(Point p1, Point p2, Boolean reverse = false)
        {
            if (reverse)
            {
                Point p = p2;
                p2 = p1;
                p1 = p;
            }

            file.WriteLine("    Segment id={0} p1={1} {2} p2={3} {4} cov1=6.250e-04 6.250e-04 1.000e-04 cov2=6.250e-04 6.250e-04 1.000e-04 ~",
                segmentId++,
                p1.X.ToString("0.0000"), p1.Y.ToString("0.0000"), p2.X.ToString("0.0000"), p2.Y.ToString("0.0000"));

            return 0;
        }
        int Node(double x, double y, double theta, double radius, string links)
        {
            file.WriteLine("    Node id={0} pose={1} {2} {3} radius={4} links={5} ~",
                nodeId++,
                x.ToString("0.0000"), y.ToString("0.0000"), theta.ToString("0.0000"), radius.ToString("0.0000"), links);
            return 0;
        }
        private int Wall(Point p1, double theta, double length, bool reverse = false)
        {
            pDest.X = p1.X + length * Math.Cos(theta * Math.PI / 180);
            pDest.Y = p1.Y + length * Math.Sin(theta * Math.PI / 180);
            return Wall(p1, pDest, reverse);
        }
        private int Rectangle(Point p1, double dX, double dY)
        {
            Wall(p1, 0, dX, true); // Bottom
            Wall(p1, 90, dY); // Left
            p1.X += dX;
            p1.Y += dY;
            Wall(p1, 180, dX, true); // Top
            Wall(p1, -90, dY); // Right
            return 0;
        }
        public double FtToM(double feet)
        {
            return feet * 0.3048;
        }
        private void GenBtn_Click(object sender, EventArgs e)
        {
            // Building Description
            // Hardcoded for DLS-DAT2 PI Cluster for now... will parameterize and make a DB interface in future
            double exitDoorLengthY = 4.204;
            double jackalWallSetbackX = 5.830;
            double firstJackalSpaceY = 2.908;
            double aislePitchY = FtToM(14.0);
            double jackalDx = 1.5;
            double jackalDy = FtToM(12.0);
            double firstViennaToBackWallY = 8.082;
            double lastViennaToFrontWallY = 8.082; // Same??
            double jackalSpace1X = FtToM(35.25);
            double jackalSpace3X = FtToM(25.0);
            double viennaDx = FtToM(25 + 25 + 16.25);
            double viennaDy = FtToM(4.5);
            double viennaSpaceDx = FtToM(9.5);
            int nAisles = 10;

            //  Computed values
            double aisleWidthY = aislePitchY - viennaDy;
            double viennaPitchDx = viennaDx + viennaSpaceDx;
            double buildingDx = 2 * jackalDx + 3 * viennaDx + jackalSpace1X + jackalSpace3X + 2 * viennaSpaceDx;
            double buildingDy = firstViennaToBackWallY + viennaDy + (nAisles - 1) * aislePitchY + lastViennaToFrontWallY;
            double backWallLengthX = buildingDx - 2 * jackalWallSetbackX; // Assumes both setbacks same
            double vienna1StartX = jackalDx + jackalSpace3X + 3 * viennaDx + 2 * viennaSpaceDx + jackalSpace1X;

            segmentId = 1;
            nodeId = 1001;
            file = new System.IO.StreamWriter(@"C:\Users\nedlecky\Documents\Bluebotics\AutoGenMap.map2", false);

            file.WriteLine("Description \"Generated by BlueboticsMapGen 1.0.0\" ~");
            file.WriteLine("Level 1 ~");
            file.WriteLine("Id 116 ~");
            file.WriteLine("Version 4 ~");

            file.WriteLine("Bin Localization.Segments");

            // Building outline
            Point p1 = new Point(0, 0);
            Wall(p1, 0, buildingDx); // Back wall
            Wall(p1, 90, buildingDy, true); // Left wall

            Point p2 = new Point(buildingDx, buildingDy); // Where left exit door wall hits back wall
            Wall(p2, 180, buildingDx); // Front wall
            Wall(p2, -90, buildingDy, true); // Right wall

            // Cutouts
            Rectangle(p1, jackalWallSetbackX, exitDoorLengthY); // Left rear cutout

            // Jackals and Viennas
            List<Point> nodes = new List<Point>();
            for (int aisle = 0; aisle < nAisles; aisle++)
                for (int secIndex = 0; secIndex < 3; secIndex++)
                {
                    // Lays out Viennas in a serpentine route for node generation!
                    int sections = secIndex;
                    if (aisle % 2 != 0)
                    {
                        sections = 2 - secIndex;
                    }

                    // Section 1 Jackal
                    Point pJackal1 = new Point(vienna1StartX, exitDoorLengthY + firstJackalSpaceY + aisle * aislePitchY);
                    Rectangle(pJackal1, jackalDx, jackalDy);

                    // Section 3 Jackal
                    Point pJackal3 = new Point(0, exitDoorLengthY + firstJackalSpaceY + aisle * aislePitchY);
                    Rectangle(pJackal3, jackalDx, jackalDy);

                    // Vienna
                    Point pVienna = new Point(jackalDx + jackalSpace3X + sections * viennaPitchDx, firstViennaToBackWallY + aisle * aislePitchY);
                    if (aisle % 2 > 0 && sections == 2) // Add an extra node at the rearward entry to this Vienna
                    {
                        Point node2 = new Point(pVienna);
                        node2.X += viennaDx + viennaSpaceDx / 2;
                        node2.Y -= aisleWidthY / 2;
                        nodes.Add(node2);
                    }
                    Point node = new Point(pVienna);
                    node.X -= viennaSpaceDx / 2;
                    node.Y -= aisleWidthY / 2;
                    nodes.Add(node);
                    if (aisle % 2 == 0 && sections == 2) // Add an extra node at the exit of this Vienna
                    {
                        Point node2 = new Point(pVienna);
                        node2.X += viennaDx + viennaSpaceDx / 2;
                        node2.Y -= aisleWidthY / 2;
                        nodes.Add(node2);
                    }
                    Rectangle(pVienna, viennaDx, viennaDy);
                }

            file.WriteLine("~");

            file.WriteLine("Bin Navigation.Nodes");
            file.WriteLine("defaultRadius=1");
            file.WriteLine("curveType=Spline4");
            string linkList = "";
            foreach (Point p in nodes)
            {
                Node(p.X, p.Y, 0, 0.5, linkList);
                linkList = nodeId.ToString();
            }
            file.WriteLine("~");
            file.Close();

            /*
            Description "Generated with QuickScan v1.0.7" ~
            Level 1 ~
            Id 116 ~
            Version 4 ~
            Bin Localization.Segments
                Segment id=9 p1=-6.734 -1.735 p2=-0.944 -1.78 cov1=6.250e-04 6.250e-04 1.000e-04 cov2=6.250e-04 6.250e-04 1.000e-04 ~
                Segment id=11 p1=-0.794 -5.981 p2=39.095 -5.956 cov1=6.250e-04 6.250e-04 1.000e-04 cov2=6.250e-04 6.250e-04 1.000e-04 ~
            ~
            Bin Navigation.Nodes
                defaultRadius=1
                curveType=Spline4
                Node id=1002 pose=14.014 1.174 1.5739 radius=0.0506 links=1011 ~
                Node id=1011 pose=14.032 -1 1.6115 links=1002 ~
                Home node=1002 ~
            ~
            */

        }
    }
}
